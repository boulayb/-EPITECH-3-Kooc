#! /usr/bin/env python3

from pyrser.grammar import Grammar
from pyrser import meta
from cnorm.parsing.declaration import Declaration
from cnorm.passes import to_c
import sys

# TODO: add @!(type)[] syntax

class TestBnf(Grammar, Declaration) :
    entry = 'translation_unit'

    grammar = """

    primary_expression =
    [
      Declaration.primary_expression
      | appel_kooc:kooc_call #is_kooc_call(_, kooc_call)
    ]

    appel_kooc =
    [
       [ "@!" '(' type_name:t ')' ]?
      '[' id:id_module [[ id:id_function list_parametre ] | module_variable:id_var] ']'
    ]

    list_parametre =
    [
      [ ':' Expression.assignement_expression ]*
    ]

    module_variable =
    [
      '.' id:variable_name
    ]

    """

@meta.hook(TestBnf)
def is_kooc_call(self, ast, kooc_call):
    print (self.value(kooc_call))
    return True

if len(sys.argv) is not 2:
        print("Usage : " + sys.argv[0] + " FILE")
        sys.exit()

testBnf = TestBnf()
res = testBnf.parse_file(sys.argv[1])

print (res.to_yml())
#print (res.to_c())
